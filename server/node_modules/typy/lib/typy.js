'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Typy = function () {
  function Typy() {
    var _this = this;

    _classCallCheck(this, Typy);

    this.t = function (obj, nestedKeys) {
      _this.input = obj;

      if (nestedKeys) {
        _this.input = (0, _util.getNestedObject)(_this.input, nestedKeys);
      }

      return _this;
    };
  }

  _createClass(Typy, [{
    key: 'isDefined',
    get: function get() {
      if (typeof this.input !== 'undefined') return true;
      return false;
    }
  }, {
    key: 'isUndefined',
    get: function get() {
      if (typeof this.input === 'undefined') return true;
      return false;
    }
  }, {
    key: 'isNull',
    get: function get() {
      if (this.input === null && _typeof(this.input) === 'object') return true;
      return false;
    }
  }, {
    key: 'isNullOrUndefined',
    get: function get() {
      if (this.isNull || this.isUndefined) return true;
      return false;
    }
  }, {
    key: 'isBoolean',
    get: function get() {
      if (_typeof(this.input) === _typeof(true)) return true;
      return false;
    }
  }, {
    key: 'isTrue',
    get: function get() {
      if (this.input === true) return true;
      return false;
    }
  }, {
    key: 'isFalse',
    get: function get() {
      if (this.input === false) return true;
      return false;
    }
  }, {
    key: 'isTruthy',
    get: function get() {
      if (this.input) return true;
      return false;
    }
  }, {
    key: 'isFalsy',
    get: function get() {
      if (!this.input) return true;
      return false;
    }
  }, {
    key: 'isObject',
    get: function get() {
      if (_typeof(this.input) === 'object' && this.input === Object(this.input) && Object.prototype.toString.call(this.input) !== '[object Array]') {
        return true;
      }
      return false;
    }
  }, {
    key: 'isEmptyObject',
    get: function get() {
      if (this.isObject && Object.keys(this.input).length === 0) return true;
      return false;
    }
  }, {
    key: 'isString',
    get: function get() {
      if (typeof this.input === 'string') return true;
      return false;
    }
  }, {
    key: 'isEmptyString',
    get: function get() {
      if (this.isString && this.input.length === 0) return true;
      return false;
    }
  }, {
    key: 'isNumber',
    get: function get() {
      if (Number.isFinite(this.input)) return true;
      return false;
    }
  }, {
    key: 'isArray',
    get: function get() {
      if (Array.isArray(this.input)) return true;
      return false;
    }
  }, {
    key: 'isEmptyArray',
    get: function get() {
      if (this.isArray && this.input.length === 0) return true;
      return false;
    }
  }, {
    key: 'isFunction',
    get: function get() {
      if (typeof this.input === 'function') return true;
      return false;
    }
  }, {
    key: 'safeObject',
    get: function get() {
      return this.input;
    }
  }, {
    key: 'safeString',
    get: function get() {
      if (this.isString) return this.input;
      return '';
    }
  }]);

  return Typy;
}();

exports.default = Typy;
module.exports = exports['default'];